/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : AdditionServerServiceDef_additionServerFSM_sm.sm
 */

#include "urn_jaus_example_addition_server_1_0/Messages/MessageSet.h"
#include "urn_jaus_example_addition_server_1_0/AdditionServerServiceDef_additionServerFSM.h"
#include "include/urn_jaus_example_addition_server_1_0/AdditionServerServiceDef_additionServerFSM_sm.h"

using namespace statemap;

namespace urn_jaus_example_addition_server_1_0
{
    // Static class declarations.
    AdditionServerServiceDef_additionServerFSM_SM_Init AdditionServerServiceDef_additionServerFSM_SM::Init("AdditionServerServiceDef_additionServerFSM_SM::Init", 0);
    AdditionServerServiceDef_additionServerFSM_SM_Ready AdditionServerServiceDef_additionServerFSM_SM::Ready("AdditionServerServiceDef_additionServerFSM_SM::Ready", 1);
    AdditionServerServiceDef_additionServerFSM_SM_Internally_Generated_State_DO_NOT_USE AdditionServerServiceDef_additionServerFSM_SM::Internally_Generated_State_DO_NOT_USE("AdditionServerServiceDef_additionServerFSM_SM::Internally_Generated_State_DO_NOT_USE", 2);

    void AdditionServerServiceDef_additionServerFSMState::InitToReadyEventDefTransition(AdditionServerServiceDef_additionServerFSMContext& context)
    {
        Default(context);
        return;
    }

    void AdditionServerServiceDef_additionServerFSMState::InternalStateChange_To_AdditionServerServiceDef_additionServerFSM_InitTransition(AdditionServerServiceDef_additionServerFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void AdditionServerServiceDef_additionServerFSMState::InternalStateChange_To_AdditionServerServiceDef_additionServerFSM_ReadyTransition(AdditionServerServiceDef_additionServerFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void AdditionServerServiceDef_additionServerFSMState::QueryAdditionTransition(AdditionServerServiceDef_additionServerFSMContext& context)
    {
        Default(context);
        return;
    }

    void AdditionServerServiceDef_additionServerFSMState::QueryAdditionTransition(AdditionServerServiceDef_additionServerFSMContext& context, QueryAddition& msg, unsigned int& sender)
    {
        Default(context);
        return;
    }

    void AdditionServerServiceDef_additionServerFSMState::Default(AdditionServerServiceDef_additionServerFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void AdditionServerServiceDef_additionServerFSM_SM_Init::InitToReadyEventDefTransition(AdditionServerServiceDef_additionServerFSMContext& context)
    {
        AdditionServerServiceDef_additionServerFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AdditionServerServiceDef_additionServerFSM_SM::Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AdditionServerServiceDef_additionServerFSM_SM::Init::InitToReadyEventDefTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.serverInitializedAction();
            ctxt.processNotifications("Ready");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AdditionServerServiceDef_additionServerFSM_SM::Init::InitToReadyEventDefTransition()"
                    << std::endl;
            }

            context.setState(AdditionServerServiceDef_additionServerFSM_SM::Ready);
        }
        catch (...)
        {
            context.setState(AdditionServerServiceDef_additionServerFSM_SM::Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AdditionServerServiceDef_additionServerFSM_SM_Init::InternalStateChange_To_AdditionServerServiceDef_additionServerFSM_ReadyTransition(AdditionServerServiceDef_additionServerFSMContext& context, JTS::InternalEvent* ie)
    {
        AdditionServerServiceDef_additionServerFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AdditionServerServiceDef_additionServerFSM_SM::Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AdditionServerServiceDef_additionServerFSM_SM::Init::InternalStateChange_To_AdditionServerServiceDef_additionServerFSM_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AdditionServerServiceDef_additionServerFSM_SM::Init::InternalStateChange_To_AdditionServerServiceDef_additionServerFSM_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(AdditionServerServiceDef_additionServerFSM_SM::Ready);
        }
        catch (...)
        {
            context.setState(AdditionServerServiceDef_additionServerFSM_SM::Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AdditionServerServiceDef_additionServerFSM_SM_Ready::InternalStateChange_To_AdditionServerServiceDef_additionServerFSM_InitTransition(AdditionServerServiceDef_additionServerFSMContext& context, JTS::InternalEvent* ie)
    {
        AdditionServerServiceDef_additionServerFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AdditionServerServiceDef_additionServerFSM_SM::Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AdditionServerServiceDef_additionServerFSM_SM::Ready::InternalStateChange_To_AdditionServerServiceDef_additionServerFSM_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.fsmStartedAction();
            ctxt.processNotifications("Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AdditionServerServiceDef_additionServerFSM_SM::Ready::InternalStateChange_To_AdditionServerServiceDef_additionServerFSM_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(AdditionServerServiceDef_additionServerFSM_SM::Init);
        }
        catch (...)
        {
            context.setState(AdditionServerServiceDef_additionServerFSM_SM::Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AdditionServerServiceDef_additionServerFSM_SM_Ready::QueryAdditionTransition(AdditionServerServiceDef_additionServerFSMContext& context, QueryAddition& msg, unsigned int& sender)
    {
        AdditionServerServiceDef_additionServerFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AdditionServerServiceDef_additionServerFSM_SM::Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AdditionServerServiceDef_additionServerFSM_SM::Ready::QueryAdditionTransition(QueryAddition& msg, unsigned int& sender)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.sendReportAdditionAction(msg, sender);
            ctxt.processNotifications("Ready");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AdditionServerServiceDef_additionServerFSM_SM::Ready::QueryAdditionTransition(QueryAddition& msg, unsigned int& sender)"
                    << std::endl;
            }

            context.setState(AdditionServerServiceDef_additionServerFSM_SM::Ready);
        }
        catch (...)
        {
            context.setState(AdditionServerServiceDef_additionServerFSM_SM::Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AdditionServerServiceDef_additionServerFSM_SM_Internally_Generated_State_DO_NOT_USE::InitToReadyEventDefTransition(AdditionServerServiceDef_additionServerFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AdditionServerServiceDef_additionServerFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AdditionServerServiceDef_additionServerFSM_SM::Internally_Generated_State_DO_NOT_USE::InitToReadyEventDefTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AdditionServerServiceDef_additionServerFSM_SM::Internally_Generated_State_DO_NOT_USE::InitToReadyEventDefTransition()"
                << std::endl;
        }


        return;
    }

    void AdditionServerServiceDef_additionServerFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAdditionTransition(AdditionServerServiceDef_additionServerFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AdditionServerServiceDef_additionServerFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AdditionServerServiceDef_additionServerFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAdditionTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AdditionServerServiceDef_additionServerFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAdditionTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
