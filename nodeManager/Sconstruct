import os
if ('JTS_COMMON_PATH' in os.environ):
	common_dir = os.environ['JTS_COMMON_PATH']
else:
	print 'Must define JTS_COMMON_PATH before building'
	exit(-1)

VariantDir('Build', 'src', duplicate=0)
include = [  './' , common_dir + '/include']
libpath = ['#lib', common_dir + '/lib/']

# Generate the environment
env = Environment(ENV=os.environ)
env.Append( CPPPATH = include)
env.Append( LIBPATH = libpath)
env.Append( INSTALL_LIB = '#./lib')
env.Append( BINPATH = '#./bin')


# Some stuff is platform specific
extra_libs = []
if env['PLATFORM'] == 'cygwin':
	print 'scons: Building for CYGWIN...'
	env.Append( CCFLAGS = ['-D__CYGWIN__'] )
	env.Append( LINKFLAGS = ['-Wl,--enable-auto-import'] )	
elif os.name == 'nt':
	print 'scons: Building for Windows...'
	env.Append( CCFLAGS = ['-DWINDOWS', '/MD', '-EHsc','-D_CRT_SECURE_NO_DEPRECATE'])
	env.Append( LINKFLAGS = ['/DEFAULTLIB:"WSock32.Lib"'] )
elif env['PLATFORM'] == 'darwin':
	env.Append( LINKFLAGS = ['-lpthread'] )
	env.Append( CPPFLAGS = ['-g', '-Wno-write-strings'])
	env.Append( CCFLAGS = ['-D__MAC__'] )	
elif os.name == 'posix':
	env.Append( LINKFLAGS = ['-lpthread', '-lrt'] )
	env.Append( CPPFLAGS = ['-g', '-Wno-write-strings'])
	extra_libs = ['pthread', 'rt']
Export('env')

# Build the common library then the NM executable
SConscript([common_dir + '/Sconstruct'])
env.Program('./bin/NodeManager', 'Build/main.cpp', LIBS=['Common', extra_libs])
env.Install('./bin', 'src/nm.cfg' )
