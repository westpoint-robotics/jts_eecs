import os
if ('JTS_COMMON_PATH' in os.environ):
	common_dir = os.environ['JTS_COMMON_PATH']
else:
	print 'Must define JTS_COMMON_PATH before building'
	exit(-1)

VariantDir('Build', 'src', duplicate=0)
include = [ './' , common_dir + '/include', common_dir + '/include/InternalEvents', common_dir + '/include/Messages', common_dir + '/include/Transport', '#include', '#urn_jts_comms_test_server_1_0/include', '#urn_jts_comms_test_server_1_0/include/InternalEvents', '#urn_jts_comms_test_server_1_0/include/Messages']
sources = ['Build/CommsTestServer.cpp', 'Build/main.cpp']
libpath = ['urn_jts_comms_test_server_1_0/lib/', '' + common_dir + '/lib/']

# Generate the environment
env = Environment(ENV=os.environ)
env.Append( CPPPATH = include)
env.Append( LIBPATH = libpath)
env.Append( INSTALL_LIB = '#./lib')
env.Append( BINPATH = '#./bin')

# Some stuff is platform specific
if env['PLATFORM'] == 'cygwin':
	print 'scons: Building for CYGWIN...'
	env.Append( CCFLAGS = ['-D__CYGWIN__'] )
	env.Append( LINKFLAGS = ['-Wl,--enable-auto-import'] )	
elif os.name == 'nt':
	print 'scons: Building for Windows...'
	env.Append( CCFLAGS = ['-DWIN32', '-DWINDOWS', '-EHsc','-D_CRT_SECURE_NO_DEPRECATE'])
	env.Append( LINKFLAGS = ['/DEFAULTLIB:"WSock32.Lib"'] )
elif os.name == 'posix':
	env.Append( LINKFLAGS = ['-lpthread', '-lrt'] )
	env.Append( CPPFLAGS = ['-g', '-Wno-write-strings'])
Export('env')

SConscript([common_dir + '/Sconstruct', 'urn_jts_comms_test_server_1_0/Sconstruct'])
env.Program('./bin/CommsTestServer_250', sources, LIBS=['CommsTestServerService', 'Common'])