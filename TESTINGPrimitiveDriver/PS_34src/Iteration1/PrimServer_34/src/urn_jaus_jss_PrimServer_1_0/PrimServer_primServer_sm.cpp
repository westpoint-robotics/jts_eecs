/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PrimServer_primServer_sm.sm
 */

#include "urn_jaus_jss_PrimServer_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_PrimServer_1_0/PrimServer_primServer.h"
#include "include/urn_jaus_jss_PrimServer_1_0/PrimServer_primServer_sm.h"

using namespace statemap;

namespace urn_jaus_jss_PrimServer_1_0
{
    // Static class declarations.
    PrimServer_primServer_SM_Ready PrimServer_primServer_SM::Ready("PrimServer_primServer_SM::Ready", 0);
    PrimServer_primServer_SM_Internally_Generated_State_DO_NOT_USE PrimServer_primServer_SM::Internally_Generated_State_DO_NOT_USE("PrimServer_primServer_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void PrimServer_primServerState::ReportWrenchEffortTransition(PrimServer_primServerContext& context)
    {
        Default(context);
        return;
    }

    void PrimServer_primServerState::Default(PrimServer_primServerContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void PrimServer_primServer_SM_Ready::ReportWrenchEffortTransition(PrimServer_primServerContext& context)
    {
        PrimServer_primServer& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PrimServer_primServer_SM::Ready"
            << std::endl;
        }

        PrimServer_primServerState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PrimServer_primServer_SM::Ready::ReportWrenchEffortTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SetWrenchEffortAction();
            ctxt.QueryWrenchEffortAction();
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : PrimServer_primServer_SM::Ready::ReportWrenchEffortTransition()"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void PrimServer_primServer_SM_Internally_Generated_State_DO_NOT_USE::ReportWrenchEffortTransition(PrimServer_primServerContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PrimServer_primServer_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PrimServer_primServer_SM::Internally_Generated_State_DO_NOT_USE::ReportWrenchEffortTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : PrimServer_primServer_SM::Internally_Generated_State_DO_NOT_USE::ReportWrenchEffortTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
