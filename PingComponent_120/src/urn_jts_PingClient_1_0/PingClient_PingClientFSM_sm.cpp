/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PingClient_PingClientFSM_sm.sm
 */

#include "urn_jts_PingClient_1_0/Messages/MessageSet.h"
#include "urn_jts_PingClient_1_0/PingClient_PingClientFSM.h"
#include "include/urn_jts_PingClient_1_0/PingClient_PingClientFSM_sm.h"

using namespace statemap;

namespace urn_jts_PingClient_1_0
{
    // Static class declarations.
    PingClient_PingClientFSM_SM_Ready PingClient_PingClientFSM_SM::Ready("PingClient_PingClientFSM_SM::Ready", 0);
    PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE PingClient_PingClientFSM_SM::Internally_Generated_State_DO_NOT_USE("PingClient_PingClientFSM_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void PingClient_PingClientFSMState::ReportHeartbeatPulseTransition(PingClient_PingClientFSMContext& context)
    {
        Default(context);
        return;
    }

    void PingClient_PingClientFSMState::Default(PingClient_PingClientFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void PingClient_PingClientFSM_SM_Ready::ReportHeartbeatPulseTransition(PingClient_PingClientFSMContext& context)
    {
        PingClient_PingClientFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PingClient_PingClientFSM_SM::Ready"
            << std::endl;
        }

        PingClient_PingClientFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PingClient_PingClientFSM_SM::Ready::ReportHeartbeatPulseTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.printToScreenAction();
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : PingClient_PingClientFSM_SM::Ready::ReportHeartbeatPulseTransition()"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE::ReportHeartbeatPulseTransition(PingClient_PingClientFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : PingClient_PingClientFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: PingClient_PingClientFSM_SM::Internally_Generated_State_DO_NOT_USE::ReportHeartbeatPulseTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : PingClient_PingClientFSM_SM::Internally_Generated_State_DO_NOT_USE::ReportHeartbeatPulseTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
