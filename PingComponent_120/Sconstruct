import os
if ('JTS_COMMON_PATH' in os.environ):
	common_dir = os.environ['JTS_COMMON_PATH']
else:
	print 'Must define JTS_COMMON_PATH before building'
	exit(-1)

VariantDir('Build', 'src', duplicate=0)
include = [ '#.', '#include', common_dir + '/include']
libpath = ['#lib', common_dir + '/lib']
sources = ['Build/PingComponent.cpp', 'Build/main.cpp']

# Generate the environment
env = Environment(ENV=os.environ)
env.Append( CPPPATH = include)
env.Append( LIBPATH = libpath)
env.Append( INSTALL_LIB = '#./lib')
env.Append( BINPATH = '#./bin')

# Some stuff is platform specific
extra_libs = []
if env['PLATFORM'] == 'cygwin':
	print 'scons: Building for CYGWIN...'
	env.Append( CCFLAGS = ['-D__CYGWIN__'] )
	env.Append( LINKFLAGS = ['-Wl,--enable-auto-import'] )
elif os.name == 'nt':
	print 'scons: Building for Windows...'
	env.Append( CCFLAGS = ['-DWIN32', '-DWINDOWS', '/MD', '-EHsc','-D_CRT_SECURE_NO_DEPRECATE'])
	env.Append( LINKFLAGS = ['/DEFAULTLIB:"WSock32.Lib"'] )
elif env['PLATFORM'] == 'darwin':
	env.Append( LINKFLAGS = ['-lpthread'] )
	env.Append( CPPFLAGS = ['-g', '-Wno-write-strings'])
	env.Append( CCFLAGS = ['-D__MAC__'] )
elif os.name == 'posix':
	env.Append( LINKFLAGS = ['-lpthread', '-lrt'] )
	env.Append( CPPFLAGS = ['-g', '-Wno-write-strings'])
	extra_libs = ['pthread', 'rt']
Export('env')

SConscript([common_dir + '/Sconstruct' , 'src/urn_jts_PingClient_1_0/Sconstruct', 'src/urn_jts_PingServer_1_0/Sconstruct'])
env.Program('./bin/PingComponent_120', sources, LIBS=['PingServerService', 'PingClientService', 'Common', extra_libs])