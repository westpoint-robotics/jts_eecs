#ifndef _H_PINGSERVER_PINGFSM_SM
#define _H_PINGSERVER_PINGFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PingServer_PingFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jts_PingServer_1_0
{
    // Forward declarations.
    class PingServer_PingFSM_SM;
    class PingServer_PingFSM_SM_Ready;
    class PingServer_PingFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class PingServer_PingFSM_SM_Default;
    class PingServer_PingFSMState;
    class PingServer_PingFSMContext;
    class PingServer_PingFSM;

    class PingServer_PingFSMState :
        public statemap::State
    {
    public:

        PingServer_PingFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(PingServer_PingFSMContext&) {};
        virtual void Exit(PingServer_PingFSMContext&) {};

        virtual void QueryHeartbeatPulseTransition(PingServer_PingFSMContext& context);

    protected:

        virtual void Default(PingServer_PingFSMContext& context);
    };

    class PingServer_PingFSM_SM
    {
    public:

        static PingServer_PingFSM_SM_Ready Ready;
        static PingServer_PingFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class PingServer_PingFSM_SM_Default :
        public PingServer_PingFSMState
    {
    public:

        PingServer_PingFSM_SM_Default(const char *name, int stateId)
        : PingServer_PingFSMState(name, stateId)
        {};

    };

    class PingServer_PingFSM_SM_Ready :
        public PingServer_PingFSM_SM_Default
    {
    public:
        PingServer_PingFSM_SM_Ready(const char *name, int stateId)
        : PingServer_PingFSM_SM_Default(name, stateId)
        {};

        void QueryHeartbeatPulseTransition(PingServer_PingFSMContext& context);
    };

    class PingServer_PingFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public PingServer_PingFSM_SM_Default
    {
    public:
        PingServer_PingFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : PingServer_PingFSM_SM_Default(name, stateId)
        {};

        void QueryHeartbeatPulseTransition(PingServer_PingFSMContext& context);
    };

    class PingServer_PingFSMContext :
        public statemap::FSMContext
    {
    public:

        PingServer_PingFSMContext(PingServer_PingFSM& owner)
        : FSMContext(PingServer_PingFSM_SM::Ready),
          _owner(owner)
        {};

        PingServer_PingFSMContext(PingServer_PingFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        PingServer_PingFSM& getOwner() const
        {
            return (_owner);
        };

        PingServer_PingFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<PingServer_PingFSMState&>(*_state));
        };

        void QueryHeartbeatPulseTransition()
        {
            setTransition("QueryHeartbeatPulseTransition");
            (getState()).QueryHeartbeatPulseTransition(*this);
            setTransition(NULL);
        };

    private:

        PingServer_PingFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_PINGSERVER_PINGFSM_SM
