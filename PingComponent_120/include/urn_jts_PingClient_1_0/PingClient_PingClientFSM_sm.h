#ifndef _H_PINGCLIENT_PINGCLIENTFSM_SM
#define _H_PINGCLIENT_PINGCLIENTFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PingClient_PingClientFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jts_PingClient_1_0
{
    // Forward declarations.
    class PingClient_PingClientFSM_SM;
    class PingClient_PingClientFSM_SM_Ready;
    class PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class PingClient_PingClientFSM_SM_Default;
    class PingClient_PingClientFSMState;
    class PingClient_PingClientFSMContext;
    class PingClient_PingClientFSM;

    class PingClient_PingClientFSMState :
        public statemap::State
    {
    public:

        PingClient_PingClientFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(PingClient_PingClientFSMContext&) {};
        virtual void Exit(PingClient_PingClientFSMContext&) {};

        virtual void ReportHeartbeatPulseTransition(PingClient_PingClientFSMContext& context);

    protected:

        virtual void Default(PingClient_PingClientFSMContext& context);
    };

    class PingClient_PingClientFSM_SM
    {
    public:

        static PingClient_PingClientFSM_SM_Ready Ready;
        static PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class PingClient_PingClientFSM_SM_Default :
        public PingClient_PingClientFSMState
    {
    public:

        PingClient_PingClientFSM_SM_Default(const char *name, int stateId)
        : PingClient_PingClientFSMState(name, stateId)
        {};

    };

    class PingClient_PingClientFSM_SM_Ready :
        public PingClient_PingClientFSM_SM_Default
    {
    public:
        PingClient_PingClientFSM_SM_Ready(const char *name, int stateId)
        : PingClient_PingClientFSM_SM_Default(name, stateId)
        {};

        void ReportHeartbeatPulseTransition(PingClient_PingClientFSMContext& context);
    };

    class PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public PingClient_PingClientFSM_SM_Default
    {
    public:
        PingClient_PingClientFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : PingClient_PingClientFSM_SM_Default(name, stateId)
        {};

        void ReportHeartbeatPulseTransition(PingClient_PingClientFSMContext& context);
    };

    class PingClient_PingClientFSMContext :
        public statemap::FSMContext
    {
    public:

        PingClient_PingClientFSMContext(PingClient_PingClientFSM& owner)
        : FSMContext(PingClient_PingClientFSM_SM::Ready),
          _owner(owner)
        {};

        PingClient_PingClientFSMContext(PingClient_PingClientFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        PingClient_PingClientFSM& getOwner() const
        {
            return (_owner);
        };

        PingClient_PingClientFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<PingClient_PingClientFSMState&>(*_state));
        };

        void ReportHeartbeatPulseTransition()
        {
            setTransition("ReportHeartbeatPulseTransition");
            (getState()).ReportHeartbeatPulseTransition(*this);
            setTransition(NULL);
        };

    private:

        PingClient_PingClientFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_PINGCLIENT_PINGCLIENTFSM_SM
